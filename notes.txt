    Подключаемые зависимости:
Spring Boot DevTools
Lombok
Spring Web
Thymeleaf
Spring Security
Spring Data JPA
PostgreSQL Driver
Validation

    В файле application.properties:
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=

В pom.xml заккоментить всё связанное с секьюрити и обновить

Spring - фреймворк, основанный на Java EE/Jakarta EE

Клиент -> HTTP запрос -> Сервер -> HTTP ответ -> Клиент
    Два HTTP метода (и адрес запрашиваемого ресурса) для выполнения запроса:
1) GET - при передаче данных отправляет в открытом виде засчёт отсутствия в тела запроса. Не подходит для передачи
важных данных, большого объёма данных, файлов
2) POST - отправляет через тело запроса, поддерживает передачу большого объёма данных, файлов
Заголовки - доп параметры в формате ключ-значение
Тело - данные, отправляемые клиентом
    HTTP ответ:
1) Статус - число, всего 4: 2хх(успешное выполнение запроса), 3хх(успешное выполнение запроса после перенаправления),
4хх(ошибка при выполнении запроса по вине клиента), 5хх(ошибка при выполнении запроса по вине сервера)
2) Заголовки
3) Тело


IoC (inversion of control)-контейнер - отвечает за жизненный цикл объекта. Они называются Spring Bean
@RestController - автоматически становится Spring Bean-ом

Адрес, который вписывается в браузере, всегда Get (@GetMapping(path =""). Параметр produces - значение заголовка
Content-Type, который определяет тип содержимого, отправляемого сервером на клиент:
1) text/plain
2) text/html
3) image/jpeg
4) image/png
5) application/json
6) application/pdf

При запуске будет доступно на адресе локальной машины: localhost / 127.0.0.1. в application.properties можно поменять
контекстный путь к приложению (server.servlet.context-path=). По умолчанию контекстный путь - /, порт 8080
<адрес сервера>:<порт><контекстный путь><внутренний адрес приложения>

В конце адреса вопросительный знак, параметры ключ=значение & ...